#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

# Wow, such ascii
# Generated with: http://patorjk.com/software/taag/#p=display&c=echo&f=Small%20Slant&t=workwork
echo
echo "===========================================";
echo "                  __                   __  ";
echo " _    _____  ____/ /___    _____  ____/ /__";
echo "| |/|/ / _ \/ __/  '_/ |/|/ / _ \/ __/  '_/";
echo "|__,__/\___/_/ /_/\_\|__,__/\___/_/ /_/\_\ ";
echo "                                           ";
echo "==========================================="
echo

# Variables
WW_DIR="${HOME}/workspace/mwn-workwork"
BIN_DIR="${WW_DIR}/bin"
VAR_UNAME=`uname`
VAR_UNAMEM=`uname -m`
VAR_PLATFORM="unknown"

# Credit: http://stackoverflow.com/a/17072017
check_platform() {
  if [[ "$VAR_UNAME" == "Darwin" ]]; then
    VAR_PLATFORM="osx"
  elif [[ "$VAR_UNAME" == "Linux" ]]; then
    VAR_PLATFORM="linux"
  elif [[ "$VAR_UNAME" == "MINGW32_NT" ]]; then
    echo "FATAL: workwork is not Windows compatible"
    exit
  else
    echo "FATAL: Could not detect the platform"
    exit
  fi
}

# Credit: http://stackoverflow.com/questions/106387/is-it-possible-to-detect-32-bit-vs-64-bit-in-a-bash-script
check_64bit() {
  if [[ "$VAR_UNAMEM" != "x86_64" ]]; then
    echo "FATAL: workwork requires a 64bit platform"
    exit
  fi
}

check_sudo() {
  if type_exists "sudo"; then
    echo "PASS: ${FUNCNAME}"
  else
    echo "FATAL: workwork requires sudo"
    exit
  fi
}

check_homebrew() {
  if [ $VAR_PLATFORM == "osx" ]; then
    if type_exists "brew"; then
      echo "PASS: ${FUNCNAME}"
    else
      echo "INFO: Installing brew..."
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
  fi
}

update_package_lists() {
  echo "INFO: Updating package lists..."
  if [ $VAR_PLATFORM == "osx" ]; then
    brew update
  elif [ $VAR_PLATFORM == "linux" ]; then
    sudo apt-get update -y
  fi
}

check_git() {
  if type_exists "git"; then
    echo "PASS: ${FUNCNAME}"
  else
    echo "INFO: Installing git..."
    if [ $VAR_PLATFORM == "osx" ]; then
      brew install git
    elif [ $VAR_PLATFORM == "linux" ]; then
      sudo apt-get -y install git-core
    fi
  fi
}

check_ansible() {
  if type_exists "ansible"; then
    echo "PASS: ${FUNCNAME}"
  else
    echo "INFO: Installing ansible..."
    if [ $VAR_PLATFORM == "osx" ]; then
      brew install ansible
    elif [ $VAR_PLATFORM == "linux" ]; then
      # Get latest version of Ansible (Jessie package is 1.7.2)
      # Credit: https://gist.github.com/alfredocambera/56e1f6cb40bf3a47e0cc
      sudo apt-get -y install python-pip libxml2-dev python-dev sshpass
      sudo pip install markupsafe jinja2 ansible
    fi
  fi
}

check_workwork() {
  if [ -d "${WW_DIR}" ]; then
    echo "PASS: ${FUNCNAME}"
  else
    echo "INFO: Cloning workwork..."
    git clone --quiet https://github.com/mamamia/mwn-workwork.git $WW_DIR
  fi
}

run_playbook_workstation() {
  echo "INFO: Starting ansible install playbook..."
  echo
  echo "If the script does not finish due to errors,"
  echo "run \`ww --install\` to start it again."
  echo
  ansible-playbook --ask-sudo-pass "${WW_DIR}/ansible/install.yml" -i "${WW_DIR}/ansible/inventory/hosts"
}

byebye() {
  echo
  echo "All done! You're almost good to go."
  echo
  echo "Start a new terminal window and check out the README.md on"
  echo "a site repo to learn how to initialise your first project."
  echo
}

# Utility functions
type_exists() {
  if [ $(type -P $1) ]; then
    return 0
  fi
  return 1
}

check_platform
check_64bit
check_sudo
check_homebrew
update_package_lists
check_git
check_ansible
check_workwork
run_playbook_workstation
byebye
