#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

# Wow, such ascii
# http://patorjk.com/software/taag/#p=display&c=echo&f=Small%20Slant&t=workwork
echo
echo "===========================================";
echo "                  __                   __  ";
echo " _    _____  ____/ /___    _____  ____/ /__";
echo "| |/|/ / _ \/ __/  '_/ |/|/ / _ \/ __/  '_/";
echo "|__,__/\___/_/ /_/\_\|__,__/\___/_/ /_/\_\ ";
echo "                                           ";
echo "==========================================="
echo

# Variables
WW_DIR="${HOME}/workspace/mwn-workwork"
BIN_DIR="${WW_DIR}/bin"
UNAME=`uname`
UNAMEM=`uname -m`
PLATFORM="unknown"

# Utility functions
type_exists() {
  if [ $(type -P $1) ]; then
    return 0
  fi
  return 1
}

install_app() {
  if [ $PLATFORM == "osx" ]; then
    brew install $1
  elif [ $PLATFORM == "linux" ]; then
    # Assumes Ubuntu/Debian for now
    sudo apt-get install -yq $1
  fi
}

# Install functions
# Credit: http://stackoverflow.com/a/17072017
# Credit: https://raw.githubusercontent.com/yellowducklabs/duckos/master/duck
check_platform() {
  if [[ "$UNAME" == "Darwin" ]]; then
    PLATFORM="osx"
  elif [[ "$UNAME" == "Linux" ]]; then
    PLATFORM="linux"
  elif [[ "$UNAME" == "MINGW32_NT" ]]; then
    echo "FATAL: WorkWork is not Windows compatible."
    exit
  else
    echo "FATAL: Could not detect the platform!"
    exit
  fi
}

# Credit: http://stackoverflow.com/questions/106387/is-it-possible-to-detect-32-bit-vs-64-bit-in-a-bash-script
check_64bit() {
  if [[ "$UNAMEM" != "x86_64" ]]; then
    echo "FATAL: WorkWork requires a 64bit machine."
    exit
  fi
}

seek_confirmation() {
  echo "CONFIRM: WorkWork is about to"
  if [ $PLATFORM == "osx" ]; then
    echo " - Install homebrew (if not found)"
  fi
  echo " - Install git (if not found)"
  echo " - Install ansible (if not found)"
  echo " - Clone mwn-workwork into ~/workspace (if not found)"
  echo " - Setup dotfiles and local dependencies with Ansible"
  echo
  read -p "Are you okay with this? (y/n) " -n 1
  if [[ ! "$REPLY" =~ ^[Yy]$ ]]; then
    echo
    echo "Exiting..."
    echo
    exit
  else
    echo
    echo
  fi
}

check_homebrew() {
  if [ $PLATFORM == "osx" ]; then
    if type_exists "brew"; then
      echo "PASS: ${FUNCNAME}"
    else
      echo "INFO: Installing brew..."
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
  fi
}

update_sources() {
  if [ $PLATFORM == "osx" ]; then
    brew update
  elif [ $PLATFORM == "linux" ]; then
    sudo apt-get update
  fi
}

check_git() {
  if type_exists "git"; then
    echo "PASS: ${FUNCNAME}"
  else
    echo "INFO: Installing git..."
    if [ $PLATFORM == "osx" ]; then
      install_app git
    elif [ $PLATFORM == "linux" ]; then
      install_app git-core
    fi
  fi
}

check_ansible() {
  if type_exists "ansible"; then
    echo "PASS: ${FUNCNAME}"
  else
    echo "INFO: Installing git..."
    install_app ansible
  fi
}

check_workwork() {
  if [ -d "${WW_DIR}" ]; then
    echo "PASS: ${FUNCNAME}"
  else
    echo "INFO: Cloning WorkWork..."
    git clone --quiet https://github.com/mamamia/mwn-workwork.git $DIR
  fi
}

run_playbooks() {
  ansible-playbook "${WW_DIR}/ansible/install.yml" -i "${WW_DIR}/ansible/hosts"
  ansible-playbook --ask-sudo-pass "${WW_DIR}/ansible/workstation.yml" -i "${WW_DIR}/ansible/hosts"
}

byebye() {
  echo
  echo "All done! You're good to go."
  echo "Start a new terminal window and run the following command to initialise your first project:"
  echo
  echo "ww init dd"
  echo
}

check_platform
check_64bit
seek_confirmation
check_homebrew
update_sources
check_git
check_ansible
check_workwork
run_playbooks
byebye
