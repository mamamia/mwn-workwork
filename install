#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

# Wow, such ascii
# Generated with: http://patorjk.com/software/taag/#p=display&c=echo&f=Small%20Slant&t=workwork
echo
echo "===========================================";
echo "                  __                   __  ";
echo " _    _____  ____/ /___    _____  ____/ /__";
echo "| |/|/ / _ \/ __/  '_/ |/|/ / _ \/ __/  '_/";
echo "|__,__/\___/_/ /_/\_\|__,__/\___/_/ /_/\_\ ";
echo "                                           ";
echo "==========================================="
echo

# Variables
WW_DIR="${HOME}/workspace/mwn-workwork"
BIN_DIR="${WW_DIR}/bin"
UNAME=`uname`
UNAMEM=`uname -m`
PLATFORM="unknown"

# Credit: http://stackoverflow.com/a/17072017
check_platform() {
  if [[ "$UNAME" == "Darwin" ]]; then
    PLATFORM="osx"
  elif [[ "$UNAME" == "Linux" ]]; then
    PLATFORM="linux"
  elif [[ "$UNAME" == "MINGW32_NT" ]]; then
    echo "FATAL: WorkWork is not Windows compatible"
    exit
  else
    echo "FATAL: Could not detect the platform"
    exit
  fi
}

# Credit: http://stackoverflow.com/questions/106387/is-it-possible-to-detect-32-bit-vs-64-bit-in-a-bash-script
check_64bit() {
  if [[ "$UNAMEM" != "x86_64" ]]; then
    echo "FATAL: WorkWork requires a 64bit platform"
    exit
  fi
}

check_sudo() {
  if type_exists "sudo"; then
    echo "PASS: ${FUNCNAME}"
  else
    echo "FATAL: WorkWork requires sudo"
    exit
  fi
}

check_homebrew() {
  if [ $PLATFORM == "osx" ]; then
    if type_exists "brew"; then
      echo "PASS: ${FUNCNAME}"
    else
      echo "INFO: Installing brew..."
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
  fi
}

update_package_lists() {
  echo "INFO: Updating package lists..."
  if [ $PLATFORM == "osx" ]; then
    brew update
  elif [ $PLATFORM == "linux" ]; then
    # Assumes Debian for now
    sudo sh -c "echo 'deb http://http.debian.net/debian wheezy-backports main' > /etc/apt/sources.list.d/wheezy-backports.list" # For Ansible
    sudo sh -c "echo 'deb http://get.docker.io/ubuntu docker main' > /etc/apt/sources.list.d/docker.list" # For Docker
    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9 # For Docker
    sudo apt-get update -y
  fi
}

check_git() {
  if type_exists "git"; then
    echo "PASS: ${FUNCNAME}"
  else
    echo "INFO: Installing git..."
    if [ $PLATFORM == "osx" ]; then
      brew install git
    elif [ $PLATFORM == "linux" ]; then
      sudo apt-get -y git-core
    fi
  fi
}

check_ansible() {
  if type_exists "ansible"; then
    echo "PASS: ${FUNCNAME}"
  else
    echo "INFO: Installing ansible..."
    if [ $PLATFORM == "osx" ]; then
      brew install ansible
    elif [ $PLATFORM == "linux" ]; then
      # Assumes Debian for now
      sudo apt-get -t wheezy-backports install -y ansible
    fi
  fi
}

check_workwork() {
  if [ -d "${WW_DIR}" ]; then
    echo "PASS: ${FUNCNAME}"
  else
    echo "INFO: Cloning WorkWork..."
    git clone --quiet https://github.com/mamamia/mwn-workwork.git $WW_DIR
  fi
}

run_playbook_workstation() {
  ansible-playbook --ask-sudo-pass "${WW_DIR}/ansible/workstation.yml" -i "${WW_DIR}/ansible/inventory/hosts"
}

byebye() {
  echo
  echo "All done! You're almost good to go."
  if [ $PLATFORM == "linux" ]; then
    echo "If you're on Wheezy, you'll need to update your kernal with:"
    echo
    echo "sudo apt-get install -t wheezy-backports linux-image-amd64"
    echo
    echo "When it's done, reboot, then run ww init dd"
    echo
  else
    echo "Start a new terminal window and run the following command to initialise your first project:"
    echo
    echo "ww init dd"
    echo
  fi
}

# Utility functions
type_exists() {
  if [ $(type -P $1) ]; then
    return 0
  fi
  return 1
}

check_platform
check_64bit
check_sudo
check_homebrew
update_package_lists
check_git
check_ansible
check_workwork
run_playbook_workstation
byebye
