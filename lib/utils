#!/bin/bash

# Utility functions
type_exists() {
  if [ $(type -P $1) ]; then
    return 0
  fi
  return 1
}

run_ansible_playbook() {
  if [ -n "$SITE_DIR" ]; then VAR_SITE_DIR="-e site_dir=${SITE_DIR}"; fi
  if [ -n "$SITE_URL" ]; then VAR_SITE_URL="-e site_url=${SITE_URL}"; fi
  if [ -n "$SITE_NAME" ]; then VAR_SITE_NAME="-e site_name=${SITE_NAME}"; fi
  if [ -n "$3" ]; then VAR_EXTRAS="$3"; fi
  print_status_secondary "INFO" "[ Running ansible-playbook... ]"
  ansible-playbook \
  "${1}/ansible/${2}" \
  --ask-become-pass \
  --inventory-file="${1}/ansible/inventory/hosts" \
  ${VAR_SITE_DIR} \
  ${VAR_SITE_URL} \
  ${VAR_SITE_NAME} \
  ${VAR_EXTRAS}
}

# Compares git hashes
check_version() {
  cd $WW_DIR

  # First test if we can fetch
  if [[ "$(git fetch --dry-run 2>&1 | grep 'Could not resolve host' )" != "" ]]; then
      echo "Internet isn't present, skip fetching"
  else
      git fetch --quiet
      # Compare versions
      VER_LOCAL=$(git rev-parse @{0})
      VER_REMOTE=$(git rev-parse @{u})
      VER_BASE=$(git merge-base @{0} @{u})
      if [ $VER_LOCAL = $VER_REMOTE ]; then
        echo "WorkWork already up-to-date!"
      elif [ $VER_LOCAL = $VER_BASE ]; then
        print_status_primary "INFO" "Updating workwork..."
        cd $WW_DIR && git pull --quiet origin master
      elif [ $VER_REMOTE = $VER_BASE ]; then
        print_status_primary "WARN" "Please push your changes to the remote..."
      else
        print_status_primary "ERROR" "Can't update workwork due to local changes..."
      fi
  fi
}

# Grabs sudo and tries to keep it alive
# Credit: https://gist.github.com/cowboy/3118588
check_sudo() {
  sudo -v -p 'Enter your sudo password:'
  while true; do sudo -n true; sleep 40; kill -0 "$$" || exit; done 2>/dev/null &
}

setup_site() {
  if [ $1 = "dd" ]; then
    SITE_FULL_NAME="Debrief Daily"
    SITE_NAME="debriefdaily"
    SITE_DIR="${HOME}/workspace/mwn-${SITE_NAME}"
    SITE_URL="${SITE_NAME}.com"
  elif [ $1 = "mm" ]; then
    SITE_FULL_NAME="Mamamia"
    SITE_NAME="mamamia"
    SITE_DIR="${HOME}/workspace/mwn-${SITE_NAME}"
    SITE_URL="${SITE_NAME}.com.au"
  elif [ $1 = "tm" ]; then
    SITE_FULL_NAME="The Motherish"
    SITE_NAME="themotherish"
    SITE_DIR="${HOME}/workspace/mwn-${SITE_NAME}"
    SITE_URL="${SITE_NAME}.com"
  elif [ $1 = "tg" ]; then
    SITE_FULL_NAME="The Glow"
    SITE_NAME="theglow"
    SITE_DIR="${HOME}/workspace/mwn-${SITE_NAME}"
    SITE_URL="${SITE_NAME}.com.au"
  fi
}

# Detect shell
# http://stackoverflow.com/questions/9910966/how-to-tell-if-its-using-zsh-or-bash
check_shell() {
  if [ -n "`$SHELL -c 'echo $ZSH_VERSION'`" ]; then
    DETECTED_SHELL="zsh"
    PROFILE="${HOME}/.zshrc"
  elif [ -n "`$SHELL -c 'echo $BASH_VERSION'`" ]; then
    DETECTED_SHELL="bash"
    PROFILE="${HOME}/.bashrc"
  else
    echo "FATAL: Could not detect the shell!"
    exit
  fi
}

# Detect the platform via uname
# http://stackoverflow.com/a/17072017
# https://raw.githubusercontent.com/yellowducklabs/duckos/master/duck
check_platform() {
  if [[ "$UNAME" == 'Darwin' ]]; then
    PLATFORM="osx"
  elif [[ "$UNAME" == 'Linux' ]]; then
    PLATFORM="linux"
  elif [[ "$UNAME" == 'MINGW32_NT' ]]; then
    echo "FATAL: This script is not Windows compatible!"
    exit
  else
    echo "FATAL: Could not detect the platform!"
    exit
  fi
}

# Save cursor
save_cursor() {
  tput sc
}

# Restore cursor and erase to end of line
replace_line() {
  tput rc
  tput el
}
