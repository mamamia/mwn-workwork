---
- hosts: workstation
  connection: local
  roles:
    - define_system

# OS X
- hosts: sys_Darwin
  connection: local
  gather_facts: false
  roles:
    - workstation_darwin_tasks

# Linux
- hosts: sys_Linux
  connection: local
  gather_facts: false
  roles:
    - workstation_linux_tasks

# Global
- hosts: workstation
  connection: local
  tasks:
    - name: disable sudo password for admin users
      become: yes
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%ADMIN ALL\='
        line: '%ADMIN ALL=(ALL) NOPASSWD:ALL'
        validate: 'visudo -cf %s'

    - name: detect shell
      action: detect_shell # This returns the varibles `detected_shell` and `shellrc_dir`
      changed_when: false

    - name: add workwork bin to PATH in .bashrc or .zshrc
      lineinfile:
        dest: "{{ shellrc_dir }}"
        regexp: "workwork bin path"
        line: "export PATH=$PATH:{{ bin_dir }} # workwork bin path (added with workstation.yml)"
        create: yes
        state: present

    - name: add workwork bin to PATH in .bash_profile
      lineinfile:
        dest: "{{ ansible_env.HOME }}/.bash_profile"
        regexp: "workwork bin path"
        line: "export PATH=$PATH:{{ bin_dir }} # workwork bin path (added with workstation.yml)"
        create: yes
        state: present
      when: detected_shell == "bash"

    - name: add execute to files in workwork bin
      file:
        path: "{{ bin_dir }}"
        mode: 0755
        recurse: yes

    - name: add docker-machine shellinit .bashrc or .zshrc
      lineinfile:
        dest: "{{ shellrc_dir }}"
        regexp: "workwork docker-machine"
        line: "if [ $(type -P docker-machine) ]; then eval $(docker-machine env default); fi # workwork docker-machine (added with workstation.yml)"
        create: yes
        state: present
      when: ansible_distribution == "MacOSX"

    - name: add docker-machine shellinit .bash_profile
      lineinfile:
        dest: "{{ ansible_env.HOME }}/.bash_profile"
        regexp: "workwork docker-machine"
        line: "if [ $(type -P docker-machine) ]; then eval $(docker-machine env default); fi # workwork docker-machine (added with workstation.yml)"
        create: yes
        state: present
      when: ansible_distribution == "MacOSX" and detected_shell == "bash"

    - name: install composer
      shell: curl -sS https://getcomposer.org/installer | php -- --install-dir=/tmp
      args:
        creates: /usr/local/bin/composer

    - name: rename composer.phar to composer
      become: yes
      shell: mv /tmp/composer.phar /usr/local/bin/composer
      args:
        creates: /usr/local/bin/composer

    - name: make composer executable
      become: yes
      file:
        path: /usr/local/bin/composer
        mode: 0755
        state: file

    - name: install wp-cli
      shell: curl --output /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
      args:
        creates: /usr/local/bin/wp

    - name: make wp-cli executable
      become: yes
      file:
        path: /usr/local/bin/wp
        mode: 0755
        state: file

    - name: install sass
      become: yes
      gem:
        name: sass
        state: present
        user_install: no

    - name: install pip
      become: yes
      easy_install:
        name: pip
        # state: latest <-- ansible v2 only

    - name: install mysql-python # for adding db with Ansible
      become: yes
      pip:
        name: MySQL-python
        state: present

    - name: install docker-py # for running docker with ansible
      become: yes
      pip:
        name: docker-py
        version: 1.2.3
